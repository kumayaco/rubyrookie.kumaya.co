<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[The Ruby Rookie Notes]]></title>
  <link href="http://rubyrookie.kumaya.co/atom.xml" rel="self"/>
  <link href="http://rubyrookie.kumaya.co/"/>
  <updated>2014-04-09T23:57:40+08:00</updated>
  <id>http://rubyrookie.kumaya.co/</id>
  <author>
    <name><![CDATA[Vincent Chen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Flow Control]]></title>
    <link href="http://rubyrookie.kumaya.co/blog/2014/03/31/flow-control/"/>
    <updated>2014-03-31T22:19:22+08:00</updated>
    <id>http://rubyrookie.kumaya.co/blog/2014/03/31/flow-control</id>
    <content type="html"><![CDATA[<p><em>started from P. 59</em></p>

<p>Conditions controls are able to be nested.</p>

<ul>
<li><code>if</code> and <code>unless</code></li>
<li><code>?</code> and Ternary Operator</li>
<li><code>elseif</code> and <code>case</code></li>
<li><code>while</code> and <code>until</code></li>
<li>code blocks</li>
</ul>


<!-- more -->


<h3><code>if</code> and <code>unless</code></h3>

<ul>
<li><code>unless</code> is just the oppsite of <code>if</code></li>
<li>both support <code>else</code> condition

<ul>
<li><code>end</code> put at after the full control flow.</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">age</span> <span class="o">=</span> <span class="mi">10</span>
</span><span class='line'><span class="k">if</span> <span class="n">age</span> <span class="o">&lt;</span> <span class="mi">18</span>
</span><span class='line'> <span class="nb">puts</span> <span class="s2">&quot;You are too young&quot;</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'> <span class="nb">puts</span> <span class="s2">&quot;You are good&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>and</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">age</span> <span class="o">=</span> <span class="mi">10</span>
</span><span class='line'><span class="k">unless</span> <span class="n">age</span> <span class="o">&gt;</span> <span class="mi">18</span>
</span><span class='line'> <span class="nb">puts</span> <span class="s2">&quot;You are too young&quot;</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'> <span class="nb">puts</span> <span class="s2">&quot;You are good&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>will both get</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>You are too young
</span></code></pre></td></tr></table></div></figure>


<h3><code>?</code> and Ternary Operator</h3>

<h4>Basic Pattern</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>&lt;condition&gt; ? &lt;result if condition is true&gt; : &lt;result if condition is false&gt;
</span></code></pre></td></tr></table></div></figure>


<h5>Example</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">age</span> <span class="o">=</span> <span class="mi">10</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;You are a &quot;</span> <span class="o">+</span> <span class="p">(</span><span class="n">age</span> <span class="o">&lt;</span> <span class="mi">18</span> <span class="o">?</span> <span class="s2">&quot;child&quot;</span> <span class="p">:</span> <span class="s2">&quot;adult&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>will get</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>You are a child
</span></code></pre></td></tr></table></div></figure>


<h3><code>elseif</code> and <code>case/when</code></h3>

<h4><code>elseif</code></h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="o">&lt;</span><span class="n">condition</span><span class="o">&gt;</span>
</span><span class='line'> <span class="o">&lt;</span><span class="n">statement</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">elseif</span> <span class="o">&lt;</span><span class="n">condition</span><span class="o">&gt;</span>
</span><span class='line'> <span class="o">&lt;</span><span class="n">statement</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'> <span class="o">&lt;</span><span class="n">statement</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Example</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">fruit</span> <span class="o">=</span> <span class="s2">&quot;orange&quot;</span>
</span><span class='line'><span class="k">if</span> <span class="n">fruit</span> <span class="o">==</span> <span class="s2">&quot;orange&quot;</span>
</span><span class='line'> <span class="n">color</span> <span class="o">=</span> <span class="s2">&quot;orange&quot;</span>
</span><span class='line'><span class="k">else</span> <span class="k">if</span> <span class="n">fruit</span> <span class="o">==</span> <span class="s2">&quot;apple&quot;</span>
</span><span class='line'> <span class="n">color</span> <span class="o">=</span> <span class="s2">&quot;red&quot;</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'> <span class="n">color</span> <span class="o">=</span> <span class="s2">&quot;unknown&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h4><code>case/when</code></h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">case</span> <span class="o">&lt;</span><span class="n">target</span><span class="o">&gt;</span>
</span><span class='line'> <span class="k">when</span> <span class="o">&lt;</span><span class="n">condition</span><span class="o">&gt;</span>
</span><span class='line'> <span class="o">&lt;</span><span class="n">statement</span><span class="o">&gt;</span>
</span><span class='line'> <span class="k">when</span> <span class="o">&lt;</span><span class="n">condition</span><span class="o">&gt;</span>
</span><span class='line'> <span class="o">&lt;</span><span class="n">statement</span><span class="o">&gt;</span>
</span><span class='line'> <span class="k">else</span>
</span><span class='line'> <span class="o">&lt;</span><span class="n">statement</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Example</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">fruit</span> <span class="o">=</span> <span class="s2">&quot;orange&quot;</span>
</span><span class='line'><span class="n">color</span> <span class="o">=</span> <span class="k">case</span> <span class="n">fruit</span>
</span><span class='line'> <span class="k">when</span> <span class="s2">&quot;orange&quot;</span>
</span><span class='line'> <span class="s2">&quot;orange&quot;</span>
</span><span class='line'> <span class="k">when</span> <span class="s2">&quot;apple&quot;</span>
</span><span class='line'> <span class="s2">&quot;red&quot;</span>
</span><span class='line'> <span class="k">else</span>
</span><span class='line'> <span class="s2">&quot;unknown&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h4><code>while</code> and <code>until</code></h4>

<p><code>while</code> and <code>until</code> can loop the code based on the given condition.</p>

<h5><code>while</code></h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">x</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="k">while</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="mi">100</span>
</span><span class='line'> <span class="nb">puts</span> <span class="n">x</span>
</span><span class='line'> <span class="n">x</span> <span class="o">=</span> <span class="n">x</span> <span class="o">*</span> <span class="mi">2</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>will get</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>1
</span><span class='line'>2
</span><span class='line'>4
</span><span class='line'>8
</span><span class='line'>16
</span><span class='line'>32
</span><span class='line'>64
</span></code></pre></td></tr></table></div></figure>


<h5><code>until</code></h5>

<p><code>until</code> provide the opposite functionality</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">x</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="k">until</span> <span class="n">x</span> <span class="o">&gt;</span> <span class="mi">99</span>
</span><span class='line'> <span class="nb">puts</span> <span class="n">x</span>
</span><span class='line'> <span class="n">x</span> <span class="o">=</span> <span class="n">x</span> <span class="o">*</span> <span class="mi">2</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>will get the same result like <code>while</code>&rsquo;s</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>1
</span><span class='line'>2
</span><span class='line'>4
</span><span class='line'>8
</span><span class='line'>16
</span><span class='line'>32
</span><span class='line'>64
</span></code></pre></td></tr></table></div></figure>


<h5>More Like English</h5>

<p>As <code>if</code> and <code>unless</code>, you can do <code>while</code> and <code>until</code> literally.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">i</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="n">i</span> <span class="o">=</span> <span class="n">i</span> <span class="o">*</span> <span class="mi">2</span> <span class="k">until</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">1000</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">i</span>
</span></code></pre></td></tr></table></div></figure>


<p>will get</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>1024
</span></code></pre></td></tr></table></div></figure>


<h3>Code Blocks</h3>

<p>Code blocks is defined within <code>{</code> and <code>}</code> or <code>do</code> and <code>end</code> delimiters.</p>

<p>More advance, you can write methods with your own handled blocks:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">each_vowel</span><span class="p">(</span><span class="o">&amp;</span><span class="n">code_block</span><span class="p">)</span>
</span><span class='line'> <span class="sx">%w{a e i o u}</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">vowel</span><span class="o">|</span> <span class="n">code_block</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">vowel</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">each_vowel</span> <span class="p">{</span> <span class="o">|</span><span class="n">vowel</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">vowel</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>will get</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>a
</span><span class='line'>e
</span><span class='line'>i
</span><span class='line'>o
</span><span class='line'>u
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>%w</code> is literal for <code>Arrays</code> (<a href="http://www.zenspider.com/Languages/Ruby/QuickRef.html#arrays">ref</a>)</li>
<li><code>.call()</code> is a method of <code>Proc</code> class, given parameter(s) will be used in the code block given.</li>
</ul>


<h4><code>lambda</code></h4>

<p><code>lambda</code> is a method from <code>Kernal</code>, it return a <code>Proc</code> object. <a href="http://awaxman11.github.io/blog/2013/08/05/what-is-the-difference-between-a-block/">The difference between both</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">print_something</span> <span class="o">=</span> <span class="nb">lambda</span> <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">x</span><span class="p">}</span>
</span><span class='line'><span class="n">print_something</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>will get</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>100
</span></code></pre></td></tr></table></div></figure>


<h3>References</h3>

<ul>
<li><a href="http://www.ruby-doc.org/core-2.1.1/Proc.html#method-i-call"><code>Proc</code></a></li>
<li><a href="http://www.ruby-doc.org/core-2.1.1/Proc.html"><code>Proc.call()</code></a></li>
<li><a href="http://www.zenspider.com/Languages/Ruby/QuickRef.html#arrays"><code>Array</code> literal</a></li>
<li><a href="http://www.ruby-doc.org/core-2.1.1/Kernel.html#method-i-lambda"><code>Kernal.lambda</code></a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hashes]]></title>
    <link href="http://rubyrookie.kumaya.co/blog/2014/03/25/hashes/"/>
    <updated>2014-03-25T22:28:11+08:00</updated>
    <id>http://rubyrookie.kumaya.co/blog/2014/03/25/hashes</id>
    <content type="html"><![CDATA[<p><em>started from P. 56</em></p>

<p>A <code>Hash</code> is a <em>dictionary-like</em> collection of unique <code>key</code>s and their <code>value</code>s. Also called associative arrays, they are similar to <code>Array</code>s, but where an <code>Array</code> uses integers as its index, a <code>Hash</code> allows you to use <strong>any object type</strong>.</p>

<!-- more -->


<h3>Basic Miscs</h3>

<p>Using <code>key</code>s to map to <code>value</code>s and construct a dictionary</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">dictionary</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;Fish&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;in water&#39;</span><span class="p">,</span> <span class="s1">&#39;Rabbit&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;not in water&#39;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Get Size</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="n">dictionary</span><span class="o">.</span><span class="n">size</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>2
</span></code></pre></td></tr></table></div></figure>


<h4>Get Value by Key</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="n">dictionary</span><span class="o">[</span><span class="s1">&#39;Fish&#39;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>will get</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">in</span> <span class="n">water</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Assign New Value</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">dictionary</span><span class="o">[</span><span class="s1">&#39;Rabbit&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;fluffy animal&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">dictionary</span><span class="o">[</span><span class="s1">&#39;Rabbit&#39;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>will get</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">fluffy</span> <span class="n">animal</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Hash Iteration</h3>

<p>using <code>each</code> just like <code>Array</code> does</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="p">{</span> <span class="s2">&quot;a&quot;</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="s2">&quot;b&quot;</span> <span class="o">=&gt;</span> <span class="mi">2</span> <span class="p">}</span>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="o">|</span> <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">key</span><span class="si">}</span><span class="s2"> equals </span><span class="si">#{</span><span class="n">value</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>will get</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span> <span class="n">equals</span> <span class="mi">1</span>
</span><span class='line'><span class="n">b</span> <span class="n">equals</span> <span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Other Hash Methods</h3>

<h4>Get Keys</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="p">{</span> <span class="s2">&quot;a&quot;</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="s2">&quot;b&quot;</span> <span class="o">=&gt;</span> <span class="mi">2</span> <span class="p">}</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">x</span><span class="o">.</span><span class="n">keys</span>
</span></code></pre></td></tr></table></div></figure>


<p>will get</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">[</span><span class="s2">&quot;a&quot;</span>,<span class="s2">&quot;b&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Delete Elements</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="p">{</span> <span class="s2">&quot;a&quot;</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="s2">&quot;b&quot;</span> <span class="o">=&gt;</span> <span class="mi">2</span> <span class="p">}</span>
</span><span class='line'><span class="n">x</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="s2">&quot;a&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nb">p</span> <span class="n">x</span>
</span></code></pre></td></tr></table></div></figure>


<p>will get</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">{</span><span class="s2">&quot;b&quot;</span><span class="o">=</span>&gt;2<span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Delete with Condition</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="p">{</span> <span class="s2">&quot;a&quot;</span> <span class="o">=&gt;</span> <span class="mi">100</span><span class="p">,</span> <span class="s2">&quot;b&quot;</span> <span class="o">=&gt;</span> <span class="mi">20</span> <span class="p">}</span>
</span><span class='line'><span class="n">x</span><span class="o">.</span><span class="n">delete_if</span> <span class="p">{</span> <span class="o">|</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="o">|</span> <span class="n">value</span> <span class="o">&lt;</span> <span class="mi">25</span> <span class="p">}</span>
</span><span class='line'><span class="nb">p</span> <span class="n">x</span>
</span></code></pre></td></tr></table></div></figure>


<p>will get</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">{</span><span class="s2">&quot;a&quot;</span><span class="o">=</span>&gt;100<span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Nested Hashes and Arrays</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">people</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'> <span class="s1">&#39;vincent&#39;</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="s1">&#39;name&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Vincent Chen&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;gender&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;male&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;languages&#39;</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s1">&#39;Chinese&#39;</span><span class="p">,</span><span class="s1">&#39;English&#39;</span><span class="o">]</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>References</h3>

<ul>
<li><a href="http://www.ruby-doc.org/core-2.1.1/Hash.html"><code>Hash</code></a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Arrays and Lists]]></title>
    <link href="http://rubyrookie.kumaya.co/blog/2014/03/22/arrays-and-lists/"/>
    <updated>2014-03-22T08:43:13+08:00</updated>
    <id>http://rubyrookie.kumaya.co/blog/2014/03/22/arrays-and-lists</id>
    <content type="html"><![CDATA[<p><em>started from P. 50</em></p>

<!-- more -->


<h3>Basic Arrays</h3>

<h4>Array Literal</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">x</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="o">]</span>
</span><span class='line'><span class="sr">//</span>   <span class="o">^</span>  <span class="o">^</span>  <span class="o">^</span>  <span class="o">^</span>  <span class="n">elements</span>
</span></code></pre></td></tr></table></div></figure>


<p>and use <em>element reference</em>, just like most of programming languages do, to access content in an array:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="n">x</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>will get</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>3
</span></code></pre></td></tr></table></div></figure>


<h4>Operations</h4>

<p>based on the array created in the first section of this article.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">x</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">x</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">x</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;Fish&quot;</span> <span class="o">*</span> <span class="mi">3</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">x</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>will get</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>4
</span><span class='line'>FishFishFish
</span></code></pre></td></tr></table></div></figure>


<h4>Push Data into an Array</h4>

<p>use <code>&lt;&lt;</code> operator or <code>push()</code> method</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">x</span> <span class="o">=</span> <span class="o">[]</span> <span class="sr">//</span> <span class="n">create</span> <span class="n">an</span> <span class="n">empty</span> <span class="n">array</span> <span class="n">at</span> <span class="n">first</span>
</span><span class='line'>
</span><span class='line'><span class="n">x</span> <span class="o">&lt;&lt;</span> <span class="s2">&quot;Word&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">//</span> <span class="ow">or</span>
</span><span class='line'>
</span><span class='line'><span class="n">x</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="s2">&quot;Word&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="sr">//</span> <span class="k">then</span>
</span><span class='line'>
</span><span class='line'><span class="n">x</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span> <span class="sr">//</span> <span class="no">Use</span> <span class="no">LIFO</span><span class="p">,</span> <span class="n">pop</span> <span class="n">the</span> <span class="n">last</span><span class="o">-</span><span class="n">postion</span><span class="o">-</span><span class="n">element</span> <span class="k">in</span> <span class="n">an</span> <span class="n">array</span>
</span><span class='line'><span class="n">x</span><span class="o">.</span><span class="n">length</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>will both get</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>Word
</span><span class='line'>1
</span></code></pre></td></tr></table></div></figure>


<h4>Join the Elements in Array</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">x</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;Join&quot;</span><span class="p">,</span> <span class="s2">&quot;The&quot;</span><span class="p">,</span> <span class="s2">&quot;Elements&quot;</span><span class="o">]</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">x</span><span class="o">.</span><span class="n">join</span>
</span></code></pre></td></tr></table></div></figure>


<p>will get</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>JoinTheElements
</span></code></pre></td></tr></table></div></figure>


<p><strong>And</strong> to be more clear, you can add your owned seperator</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="n">x</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;, &#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>will get</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>Join, The, Elements
</span></code></pre></td></tr></table></div></figure>


<h3>Process String into Array</h3>

<p>As the <a href="http://rubyrookie.kumaya.co/blog/2014/03/19/string-basic-regular-expressions/">previous article</a> about basic regex, you can put the results as elements into array.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="s2">&quot;This is a Test&quot;</span><span class="o">.</span><span class="n">scan</span><span class="p">(</span><span class="sr">/\w/</span><span class="p">)</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;, &quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>will get</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>T, h, i, s, i, s, a, T, e, s, t
</span></code></pre></td></tr></table></div></figure>


<p>Using <code>splite()</code> to seperate the string into array by given regular expression.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="s2">&quot;This is a Test&quot;</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="sr">/\s/</span><span class="p">)</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;, &quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The regular expression <code>/\s/</code> is to let method splitting based on space. And this will get:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>This, is, a, Test
</span></code></pre></td></tr></table></div></figure>


<h3>Array Iteration</h3>

<p>There are two simple ways to iterate arrays: <code>each</code> and <code>collect</code>. Using pipelines, <code>||</code>, to catch the values.</p>

<h4><code>each</code></h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="s2">&quot;a&quot;</span><span class="p">,</span><span class="s2">&quot;b&quot;</span><span class="p">,</span><span class="s2">&quot;c&quot;</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">element</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">element</span> <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>will get</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>a
</span><span class='line'>b
</span><span class='line'>c
</span></code></pre></td></tr></table></div></figure>


<h4><code>collect</code></h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">].</span><span class="n">collect</span> <span class="k">do</span> <span class="o">|</span><span class="n">element</span><span class="o">|</span> <span class="n">element</span><span class="o">*</span><span class="mi">2</span> <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>will get returned array with modified elements</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">[</span>2,4,6<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>map</code> is the alias of <code>collect</code>, for more, please read this <a href="http://stackoverflow.com/a/5254764">answer</a>.</p>

<h4>Old Fasion is also Great</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="o">]</span>
</span><span class='line'><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">a</span><span class="o">.</span><span class="n">length</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">a</span><span class="o">[</span><span class="n">i</span><span class="o">]</span>
</span><span class='line'>  <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>will also get the same result as using <code>each</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>1
</span><span class='line'>2
</span><span class='line'>3
</span><span class='line'>4
</span></code></pre></td></tr></table></div></figure>


<h3>Others about Array</h3>

<h4>Addition and Substraction</h4>

<p>Giving two arrays,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span>
</span><span class='line'><span class="n">b</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using addition</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
</span></code></pre></td></tr></table></div></figure>


<p>will get the combined array</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">[</span>1,2,3,1,3<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using substraction</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span> <span class="o">-</span> <span class="n">b</span>
</span></code></pre></td></tr></table></div></figure>


<p>will get the array</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">[</span>2<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Check is Empty</h4>

<p>Using <code>empty?</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="o">]</span>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">empty?</span>
</span></code></pre></td></tr></table></div></figure>


<p>will get</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="kp">false</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Check an Array has a Certain Element</h4>

<p>Using <code>include?</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">x</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="s2">&quot;x&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">x</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>will get</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">false</span>
</span><span class='line'><span class="nb">true</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Accessiong the First and Last Elements</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">x</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">x</span><span class="o">.</span><span class="n">last</span>
</span></code></pre></td></tr></table></div></figure>


<p>will get</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>1
</span><span class='line'>3
</span></code></pre></td></tr></table></div></figure>


<h5>More</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">a</span><span class="o">.</span><span class="n">first</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;, &quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>will get</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>1, 2
</span></code></pre></td></tr></table></div></figure>


<h4>Reverse</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">a</span><span class="o">.</span><span class="n">reverse</span>
</span></code></pre></td></tr></table></div></figure>


<p>will get</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">[</span>3,2,1<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>References</h3>

<ul>
<li><a href="http://www.ruby-doc.org/core-2.1.1/Array.html"><code>Array</code></a></li>
<li><a href="http://www.ruby-doc.org/core-2.1.1/Array.html#method-i-push"><code>push()</code></a></li>
<li><a href="http://www.ruby-doc.org/core-2.1.1/Array.html#method-i-join"><code>join()</code></a></li>
<li><a href="http://www.ruby-doc.org/core-2.1.1/Array.html#method-i-split"><code>split()</code></a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[String: Basic Regular Expressions]]></title>
    <link href="http://rubyrookie.kumaya.co/blog/2014/03/19/string-basic-regular-expressions/"/>
    <updated>2014-03-19T22:31:54+08:00</updated>
    <id>http://rubyrookie.kumaya.co/blog/2014/03/19/string-basic-regular-expressions</id>
    <content type="html"><![CDATA[<p><em>started from P. 44</em></p>

<p>This article is the brief introduction to regex.</p>

<ul>
<li>Substitutions &ndash; <code>.sub()</code></li>
<li>Iterations &ndash; <code>.scan()</code></li>
<li>Matching</li>
</ul>


<!-- more -->


<h3>Substitutions</h3>

<h4>Basics</h4>

<p>First, we can try without regex:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="s2">&quot;foobar&quot;</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="s1">&#39;bar&#39;</span><span class="p">,</span><span class="s1">&#39;foo&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>will get</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>foofoo
</span></code></pre></td></tr></table></div></figure>


<p>Using <code>gsub()</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="s2">&quot;this is a test&quot;</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="s1">&#39;i&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>will get</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>ths s a <span class="nb">test</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Substitute with simple <code>regex</code></h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">x</span><span class="o">=</span> <span class="s2">&quot;This is a test&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">x</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="sr">/^../</span><span class="p">,</span><span class="s1">&#39;Hello&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>^</code> is an <em>anchor</em> to let it know will match from the beginning of any lines within the string. the two periods, <code>..</code>, mean two characters. So the <code>/^../</code> means &ldquo;any two characters immediately after the start of a line,&rdquo; and it will substitute <code>Th</code> in this case.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>Hellois is a <span class="nb">test</span>
</span></code></pre></td></tr></table></div></figure>


<p>and <code>$</code> is an <em>anchor</em> to let it know match frone the end of any lines within the given string.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">x</span><span class="o">=</span> <span class="s2">&quot;This is a test&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">x</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="sr">/..$/</span><span class="p">,</span><span class="s1">&#39;Hello&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>will get</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>This is a teHello
</span></code></pre></td></tr></table></div></figure>


<h3>Iteration</h3>

<p>basic <code>scan()</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="s2">&quot;xyz&quot;</span><span class="o">.</span><span class="n">scan</span><span class="p">(</span><span class="sr">/./</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">letter</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">letter</span> <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="sr">//</span> <span class="ow">or</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&quot;xyz&quot;</span><span class="o">.</span><span class="n">scan</span><span class="p">(</span><span class="sr">/./</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">letter</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">letter</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>/./</code> will scan every letter out, these will both get</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>x
</span><span class='line'>y
</span><span class='line'>z
</span></code></pre></td></tr></table></div></figure>


<h4>Symbols</h4>

<p>if use only <code>..</code> for extract every other letter, will get <em>space</em>s as well. to prevent this situation, we can use <code>\w</code> to skip spaces.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="s2">&quot;This is a test&quot;</span><span class="o">.</span><span class="n">scan</span><span class="p">(</span><span class="sr">/\w\w/</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">x</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>will get</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>Th
</span><span class='line'>is
</span><span class='line'>is
</span><span class='line'>te
</span><span class='line'>st
</span></code></pre></td></tr></table></div></figure>


<h3>Basic Special Characters and Symbols Within Regular Expressions</h3>

<table>
<thead>
<tr>
<th>Character </th>
<th> Meaning</th>
</tr>
</thead>
<tbody>
<tr>
<td>^  </td>
<td> Anchor, the begining of a line</td>
</tr>
<tr>
<td>$  </td>
<td> Anchor, the end of a line</td>
</tr>
<tr>
<td>\A </td>
<td> Anchor, the start of a string</td>
</tr>
<tr>
<td>\Z </td>
<td> Anchor, the end of a string</td>
</tr>
<tr>
<td>.  </td>
<td> Any character </td>
</tr>
<tr>
<td>\w </td>
<td> Any letter, digit, or underscore</td>
</tr>
<tr>
<td>\W </td>
<td> Anything that <code>\w</code> doesn&rsquo;t match</td>
</tr>
<tr>
<td>\d </td>
<td> Any digit</td>
</tr>
<tr>
<td>\D </td>
<td> Non-digit</td>
</tr>
<tr>
<td>\s </td>
<td> White space, tab, newline</td>
</tr>
<tr>
<td>\S </td>
<td> non-whitespace</td>
</tr>
</tbody>
</table>


<br/><br/>


<h3>Matching</h3>

<p><code>=~</code> &ndash; the matching operator</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="s2">&quot;String has vowels&quot;</span> <span class="k">if</span> <span class="s2">&quot;This is a test&quot;</span> <span class="o">=~</span> <span class="sr">/[aeiou]/</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>match</code> returns a <code>MatchData</code> object that can be accessed like an array.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">x</span> <span class="o">=</span> <span class="s2">&quot;This is a test&quot;</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="sr">/(\w+) (\w+)/</span><span class="p">)</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">x</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">x</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">x</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>will get</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">This</span> <span class="n">is</span>
</span><span class='line'><span class="no">This</span>
</span><span class='line'><span class="n">is</span>
</span></code></pre></td></tr></table></div></figure>


<h3>References</h3>

<ul>
<li><a href="http://www.ruby-doc.org/core-2.1.0/String.html#method-i-sub">sub()</a></li>
<li><a href="http://www.ruby-doc.org/core-2.1.0/String.html#method-i-gsub">gsub()</a></li>
<li><a href="http://www.ruby-doc.org/core-2.1.0/String.html#method-i-scan">scan()</a></li>
<li><a href="http://www.ruby-doc.org/core-2.1.0/String.html#method-i-match">match()</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[String: Manipulations]]></title>
    <link href="http://rubyrookie.kumaya.co/blog/2014/03/19/string-manipulations/"/>
    <updated>2014-03-19T00:27:09+08:00</updated>
    <id>http://rubyrookie.kumaya.co/blog/2014/03/19/string-manipulations</id>
    <content type="html"><![CDATA[<p><em>started from P. 43</em></p>

<ul>
<li>String Methods</li>
</ul>


<!-- more -->


<p></p>

<h3>String Methods</h3>

<table>
<thead>
<tr>
<th>Expression </th>
<th> Output</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>"Test" + "Test"</code> </td>
<td> <code>TestTest</code></td>
</tr>
<tr>
<td><code>"Test".capitalize</code> </td>
<td> <code>Test</code></td>
</tr>
<tr>
<td><code>"Test".downcase</code> </td>
<td> <code>test</code></td>
</tr>
<tr>
<td><code>"Test".chop</code> </td>
<td> <code>Tes</code></td>
</tr>
<tr>
<td><code>"Test".next</code> </td>
<td> <code>Tesu</code></td>
</tr>
<tr>
<td><code>"Test".reverse</code> </td>
<td> <code>tseT</code></td>
</tr>
<tr>
<td><code>"Test".sum</code> </td>
<td> <code>416</code></td>
</tr>
<tr>
<td><code>"Test".swapcase</code> </td>
<td> <code>tEST</code></td>
</tr>
<tr>
<td><code>"Test".upcase</code> </td>
<td> <code>TEST</code></td>
</tr>
<tr>
<td><code>"Test".upcase.reverse</code> </td>
<td> <code>TSET</code></td>
</tr>
<tr>
<td><code>"Test".upcase.reverse.next</code> </td>
<td> <code>TSEU</code></td>
</tr>
</tbody>
</table>


<hr />

<p>Like the last three items, you can combo the methods to do multiple manipulations on String.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[String: Interpolation]]></title>
    <link href="http://rubyrookie.kumaya.co/blog/2014/03/19/string-interpolation/"/>
    <updated>2014-03-19T00:00:54+08:00</updated>
    <id>http://rubyrookie.kumaya.co/blog/2014/03/19/string-interpolation</id>
    <content type="html"><![CDATA[<p><em>start from P. 43</em></p>

<!-- more -->


<p>Using <code>#{}</code> to wrap the variables or expressions in, will print out what you have inside.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">x</span> <span class="o">=</span> <span class="mi">10</span>
</span><span class='line'><span class="n">y</span> <span class="o">=</span> <span class="mi">20</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">x</span><span class="si">}</span><span class="s2"> + </span><span class="si">#{</span><span class="n">y</span><span class="si">}</span><span class="s2"> = </span><span class="si">#{</span><span class="n">x</span><span class="o">+</span><span class="n">y</span><span class="si">}</span><span class="s2">&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>will get;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>10 + <span class="nv">20</span> <span class="o">=</span> 30
</span></code></pre></td></tr></table></div></figure>


<p>In the other hand, you can do this as well:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="s2">&quot;100 * 5 = </span><span class="si">#{</span><span class="mi">100</span><span class="o">*</span><span class="mi">5</span><span class="si">}</span><span class="s2">&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>will get:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">100</span> <span class="o">*</span> <span class="mi">5</span> <span class="o">=</span> <span class="mi">500</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Combo</h3>

<p>Combine with other functionalities mentioned before, we can come up with more complicated statement like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">my_string</span> <span class="s2">&quot;It&#39;s a </span><span class="si">#{</span><span class="s2">&quot;bad &quot;</span> <span class="o">*</span> <span class="mi">5</span><span class="si">}</span><span class="s2">world&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">my_string</span>
</span></code></pre></td></tr></table></div></figure>


<p>will get:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>It<span class="err">&#39;</span>s a bad bad bad bad bad world
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Text and Strings]]></title>
    <link href="http://rubyrookie.kumaya.co/blog/2014/03/17/text-and-strings/"/>
    <updated>2014-03-17T22:43:52+08:00</updated>
    <id>http://rubyrookie.kumaya.co/blog/2014/03/17/text-and-strings</id>
    <content type="html"><![CDATA[<p><em>start from P. 39</em></p>

<p>Manipulating text and content.</p>

<ul>
<li>String Literals</li>
</ul>


<!-- more -->


<h2>String Literals</h2>

<p>First, the <code>String</code> class:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Hello, world!&quot;</span><span class="o">.</span><span class="n">class</span>
</span></code></pre></td></tr></table></div></figure>


<p>will get</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>String
</span></code></pre></td></tr></table></div></figure>


<h3>Basic expressions just like <code>Number</code>s</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">x</span> <span class="o">=</span> <span class="s2">&quot;Test&quot;</span>
</span><span class='line'><span class="n">y</span> <span class="o">=</span> <span class="s2">&quot;String&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Success!&quot;</span> <span class="k">if</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span> <span class="o">==</span> <span class="s2">&quot;TestString&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>result:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>Success!
</span></code></pre></td></tr></table></div></figure>


<h3>Multiple Lines</h3>

<p>You can wrap your lines with your prefered delimiters.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">x</span> <span class="o">=</span> <span class="sx">%q{This is first line,</span>
</span><span class='line'><span class="sx">second line and</span>
</span><span class='line'><span class="sx">third line}</span>
</span><span class='line'>
</span><span class='line'><span class="sr">//</span> <span class="ow">or</span>
</span><span class='line'>
</span><span class='line'><span class="n">x</span> <span class="o">=</span> <span class="sx">%q!This is first line,</span>
</span><span class='line'><span class="sx">second line and</span>
</span><span class='line'><span class="sx">third line!</span>
</span><span class='line'>
</span><span class='line'><span class="sr">//</span> <span class="ow">or</span>
</span><span class='line'>
</span><span class='line'><span class="n">x</span> <span class="o">=</span> <span class="o">&lt;&lt;</span><span class="no">END_MY_LINE</span>
</span><span class='line'><span class="sh">This is first line</span>
</span><span class='line'><span class="sh">second line and</span>
</span><span class='line'><span class="sh">third line</span>
</span><span class='line'><span class="no">END_MY_LINE</span>
</span></code></pre></td></tr></table></div></figure>


<p>For the last example above, &lt;&lt; start the string literal.</p>

<h3>String Expressions</h3>

<p>Just like the previous section, <code>String</code> could use expressions and act like <code>Number</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="s2">&quot;abc&quot;</span><span class="o">*</span><span class="mi">5</span>
</span><span class='line'><span class="o">//</span> <span class="n">abcabcabcabcabc</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;x&quot;</span> <span class="o">&gt;</span> <span class="s2">&quot;y&quot;</span>
</span><span class='line'><span class="sr">//</span> <span class="kp">false</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;y&quot;</span> <span class="o">&gt;</span> <span class="s2">&quot;x&quot;</span>
</span><span class='line'><span class="sr">//</span> <span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure>


<h4>ASCII</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="sc">?x</span>
</span><span class='line'><span class="nb">puts</span> <span class="mi">120</span><span class="o">.</span><span class="n">chr</span>
</span></code></pre></td></tr></table></div></figure>


<p>First line will convert character to <code>ASCII</code> value, the second line will convert the value to character based on <code>ASCII</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>120
</span><span class='line'>x
</span></code></pre></td></tr></table></div></figure>


<h2>References</h2>

<ul>
<li>class <a href="http://www.ruby-doc.org/core-2.1.1/String.html">String</a> <em>base on ruby 2.1.1</em></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Numbers: Floating Point and Constant]]></title>
    <link href="http://rubyrookie.kumaya.co/blog/2014/03/12/numbers-floating-point-and-constant/"/>
    <updated>2014-03-12T22:55:28+08:00</updated>
    <id>http://rubyrookie.kumaya.co/blog/2014/03/12/numbers-floating-point-and-constant</id>
    <content type="html"><![CDATA[<p><em>start from P. 37</em></p>

<ul>
<li>Floating Point Numbers</li>
<li>Constants</li>
</ul>


<!-- more -->


<h2>Floating Point Numbers</h2>

<p>If you want to devide integer numbers and show as float, you need to add <code>.0</code> to the numbers:</p>

<p><strong>Original</strong> &ndash; integer divide integer will producing integer.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="mi">10</span> <span class="o">/</span> <span class="mi">3</span>
</span></code></pre></td></tr></table></div></figure>


<p>will producing:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>3
</span></code></pre></td></tr></table></div></figure>


<p><strong>Adding</strong> <code>.0</code> to treat as floating point numbers:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="mi">10</span><span class="o">.</span><span class="mi">0</span> <span class="o">/</span> <span class="mi">3</span><span class="o">.</span><span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<p>will producing:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>3.333333333333333
</span></code></pre></td></tr></table></div></figure>


<h3>Convertion of types</h3>

<p>Using <code>to_f</code> and <code>to_i</code> or relevant methods to convert types.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">x</span> <span class="o">=</span> <span class="mi">10</span>
</span><span class='line'><span class="n">y</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">x</span><span class="o">.</span><span class="n">to_f</span> <span class="o">/</span> <span class="n">y</span><span class="o">.</span><span class="n">to_f</span>
</span></code></pre></td></tr></table></div></figure>


<p>will producing:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>3.33333333333333
</span></code></pre></td></tr></table></div></figure>


<p>Convert to integer like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="mi">5</span><span class="o">.</span><span class="mi">7</span><span class="o">.</span><span class="n">to_i</span>
</span></code></pre></td></tr></table></div></figure>


<p>and get:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>5
</span></code></pre></td></tr></table></div></figure>


<h2>Constants</h2>

<p>Make the variable name beginning with a capital letter to let it is a constant.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Pi</span> <span class="o">=</span> <span class="mi">3</span><span class="o">.</span><span class="mi">14159</span>
</span></code></pre></td></tr></table></div></figure>


<h3>The Class Name</h3>

<p>The class name start with capital letter as well, it means once th class is defined, it is a constant part of the program and therefore acts as a constant, too.</p>

<h2>References</h2>

<ul>
<li><a href="http://www.ruby-doc.org/core-2.1.1/Float.html">Float</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Looping]]></title>
    <link href="http://rubyrookie.kumaya.co/blog/2014/03/11/looping/"/>
    <updated>2014-03-11T22:23:56+08:00</updated>
    <id>http://rubyrookie.kumaya.co/blog/2014/03/11/looping</id>
    <content type="html"><![CDATA[<p><em>start from P. 36</em></p>

<ul>
<li><code>times</code> to loop</li>
<li>loop with other iterators</li>
</ul>


<!-- more -->


<h2>Basic: Using <code>times</code> method to looping</h2>

<p>and using <code>do ... end</code> to surround what do you want to do. And it is better way rather than using <code>{ ... }</code>, but curly brackets make the code more easy to read on a single line.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">5</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="nb">puts</span> <span class="s2">&quot;Test&quot;</span> <span class="k">end</span>
</span><span class='line'><span class="mi">5</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;Test&quot;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>will both produce the same results:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>Test
</span><span class='line'>Test
</span><span class='line'>Test
</span><span class='line'>Test
</span><span class='line'>Test
</span></code></pre></td></tr></table></div></figure>


<h2>Iterators</h2>

<p>The basic methods are like followings:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">.</span><span class="n">upto</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span> <span class="p">{</span> <span class="sr">/* Do what ever you want */</span> <span class="p">}</span>     <span class="sr">//</span> <span class="err">從</span> <span class="mi">1</span> <span class="err">一次加</span> <span class="mi">1</span> <span class="err">加到</span> <span class="mi">5</span>
</span><span class='line'><span class="mi">10</span><span class="o">.</span><span class="n">downto</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span> <span class="p">{</span> <span class="sr">/* Do what ever you want */</span> <span class="p">}</span>  <span class="sr">//</span> <span class="err">從</span> <span class="mi">10</span> <span class="err">一次減</span> <span class="mi">1</span> <span class="err">減到</span> <span class="mi">5</span>
</span><span class='line'><span class="mi">0</span><span class="o">.</span><span class="n">step</span><span class="p">(</span><span class="mi">50</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span> <span class="p">{</span> <span class="sr">/* Do what ever you want */</span> <span class="p">}</span> <span class="sr">//</span> <span class="err">從</span> <span class="mi">0</span> <span class="err">加到</span> <span class="mi">50</span> <span class="err">，每次加</span> <span class="mi">5</span>
</span></code></pre></td></tr></table></div></figure>


<h3>可以用 pipe line 來接從迴圈傳進來的值</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">.</span><span class="n">upto</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">number</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">number</span> <span class="p">}</span> <span class="sr">//</span> <span class="n">pipe</span> <span class="n">line</span> <span class="err">之間可以放任意符合規則名稱的變數</span>
</span><span class='line'>
</span><span class='line'><span class="sr">//</span> <span class="ow">or</span>
</span><span class='line'>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="n">upto</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">number</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">number</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>will both produce:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>1
</span><span class='line'>2
</span><span class='line'>3
</span><span class='line'>4
</span><span class='line'>5
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Basic Comparison]]></title>
    <link href="http://rubyrookie.kumaya.co/blog/2014/03/11/basic-comparison/"/>
    <updated>2014-03-11T21:48:54+08:00</updated>
    <id>http://rubyrookie.kumaya.co/blog/2014/03/11/basic-comparison</id>
    <content type="html"><![CDATA[<!-- more -->


<h2>Full List of Comparison</h2>

<table>
<thead>
<tr>
<th> Comparison </th>
<th> Meaning </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>x &gt; y</code> </td>
<td> Greater than, 大於</td>
</tr>
<tr>
<td> <code>x &lt; y</code> </td>
<td> Less than, 小於 </td>
</tr>
<tr>
<td> <code>x == y</code> </td>
<td> Equal to, 等於</td>
</tr>
<tr>
<td> <code>x &gt;= y</code> </td>
<td> Greater than <em>or</em> equal to, 大於或等於</td>
</tr>
<tr>
<td> <code>x &lt;= y</code> </td>
<td> Less than <em>or</em> equal to, 小於或等於</td>
</tr>
<tr>
<td> <code>x &lt;=&gt; y</code> </td>
<td> Comparison; return <code>0</code> if <code>x</code> and <code>y</code> are equal, <code>1</code> if <code>x</code> is higher, and <code>-1</code> if <code>y</code> is higher</td>
</tr>
<tr>
<td> <code>x != y</code> </td>
<td> Not equal to, 不等於</td>
</tr>
</tbody>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Start]]></title>
    <link href="http://rubyrookie.kumaya.co/blog/2014/03/10/start/"/>
    <updated>2014-03-10T22:19:57+08:00</updated>
    <id>http://rubyrookie.kumaya.co/blog/2014/03/10/start</id>
    <content type="html"><![CDATA[<p>這個是我開始學 Ruby 用來架筆記的網站，開始於 2013 年 3 月 10 日。</p>
]]></content>
  </entry>
  
</feed>
