<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[The Ruby Rookie Notes]]></title>
  <link href="http://rubyrookie.kumaya.co/atom.xml" rel="self"/>
  <link href="http://rubyrookie.kumaya.co/"/>
  <updated>2014-03-19T06:21:16+08:00</updated>
  <id>http://rubyrookie.kumaya.co/</id>
  <author>
    <name><![CDATA[Vincent Chen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[String: Manipulations]]></title>
    <link href="http://rubyrookie.kumaya.co/blog/2014/03/19/string-manipulations/"/>
    <updated>2014-03-19T00:27:09+08:00</updated>
    <id>http://rubyrookie.kumaya.co/blog/2014/03/19/string-manipulations</id>
    <content type="html"><![CDATA[<p><em>started from P. 43</em></p>

<ul>
<li>String Methods</li>
</ul>


<!-- more -->


<p></p>

<h3>String Methods</h3>

<table>
<thead>
<tr>
<th>Expression </th>
<th> Output</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>"Test" + "Test"</code> </td>
<td> <code>TestTest</code></td>
</tr>
<tr>
<td><code>"Test".capitalize</code> </td>
<td> <code>Test</code></td>
</tr>
<tr>
<td><code>"Test".downcase</code> </td>
<td> <code>test</code></td>
</tr>
<tr>
<td><code>"Test".chop</code> </td>
<td> <code>Tes</code></td>
</tr>
<tr>
<td><code>"Test".next</code> </td>
<td> <code>Tesu</code></td>
</tr>
<tr>
<td><code>"Test".reverse</code> </td>
<td> <code>tseT</code></td>
</tr>
<tr>
<td><code>"Test".sum</code> </td>
<td> <code>416</code></td>
</tr>
<tr>
<td><code>"Test".swapcase</code> </td>
<td> <code>tEST</code></td>
</tr>
<tr>
<td><code>"Test".upcase</code> </td>
<td> <code>TEST</code></td>
</tr>
<tr>
<td><code>"Test".upcase.reverse</code> </td>
<td> <code>TSET</code></td>
</tr>
<tr>
<td><code>"Test".upcase.reverse.next</code> </td>
<td> <code>TSEU</code></td>
</tr>
</tbody>
</table>


<hr />

<p>Like the last three items, you can combo the methods to do multiple manipulations on String.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[String: Interpolation]]></title>
    <link href="http://rubyrookie.kumaya.co/blog/2014/03/19/string-interpolation/"/>
    <updated>2014-03-19T00:00:54+08:00</updated>
    <id>http://rubyrookie.kumaya.co/blog/2014/03/19/string-interpolation</id>
    <content type="html"><![CDATA[<p><em>start from P. 43</em></p>

<!-- more -->


<p>Using <code>#{}</code> to wrap the variables or expressions in, will print out what you have inside.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">x</span> <span class="o">=</span> <span class="mi">10</span>
</span><span class='line'><span class="n">y</span> <span class="o">=</span> <span class="mi">20</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">x</span><span class="si">}</span><span class="s2"> + </span><span class="si">#{</span><span class="n">y</span><span class="si">}</span><span class="s2"> = </span><span class="si">#{</span><span class="n">x</span><span class="o">+</span><span class="n">y</span><span class="si">}</span><span class="s2">&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>will get;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>10 + <span class="nv">20</span> <span class="o">=</span> 30
</span></code></pre></td></tr></table></div></figure>


<p>In the other hand, you can do this as well:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="s2">&quot;100 * 5 = </span><span class="si">#{</span><span class="mi">100</span><span class="o">*</span><span class="mi">5</span><span class="si">}</span><span class="s2">&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>will get:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">100</span> <span class="o">*</span> <span class="mi">5</span> <span class="o">=</span> <span class="mi">500</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Combo</h3>

<p>Combine with other functionalities mentioned before, we can come up with more complicated statement like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">my_string</span> <span class="s2">&quot;It&#39;s a </span><span class="si">#{</span><span class="s2">&quot;bad &quot;</span> <span class="o">*</span> <span class="mi">5</span><span class="si">}</span><span class="s2">world&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">my_string</span>
</span></code></pre></td></tr></table></div></figure>


<p>will get:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>It<span class="err">&#39;</span>s a bad bad bad bad bad world
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Text and Strings]]></title>
    <link href="http://rubyrookie.kumaya.co/blog/2014/03/17/text-and-strings/"/>
    <updated>2014-03-17T22:43:52+08:00</updated>
    <id>http://rubyrookie.kumaya.co/blog/2014/03/17/text-and-strings</id>
    <content type="html"><![CDATA[<p><em>start from P. 39</em></p>

<p>Manipulating text and content.</p>

<ul>
<li>String Literals</li>
</ul>


<!-- more -->


<h2>String Literals</h2>

<p>First, the <code>String</code> class:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Hello, world!&quot;</span><span class="o">.</span><span class="n">class</span>
</span></code></pre></td></tr></table></div></figure>


<p>will get</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>String
</span></code></pre></td></tr></table></div></figure>


<h3>Basic expressions just like <code>Number</code>s</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">x</span> <span class="o">=</span> <span class="s2">&quot;Test&quot;</span>
</span><span class='line'><span class="n">y</span> <span class="o">=</span> <span class="s2">&quot;String&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Success!&quot;</span> <span class="k">if</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span> <span class="o">==</span> <span class="s2">&quot;TestString&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>result:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>Success!
</span></code></pre></td></tr></table></div></figure>


<h3>Multiple Lines</h3>

<p>You can wrap your lines with your prefered delimiters.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">x</span> <span class="o">=</span> <span class="sx">%q{This is first line,</span>
</span><span class='line'><span class="sx">second line and</span>
</span><span class='line'><span class="sx">third line}</span>
</span><span class='line'>
</span><span class='line'><span class="sr">//</span> <span class="ow">or</span>
</span><span class='line'>
</span><span class='line'><span class="n">x</span> <span class="o">=</span> <span class="sx">%q!This is first line,</span>
</span><span class='line'><span class="sx">second line and</span>
</span><span class='line'><span class="sx">third line!</span>
</span><span class='line'>
</span><span class='line'><span class="sr">//</span> <span class="ow">or</span>
</span><span class='line'>
</span><span class='line'><span class="n">x</span> <span class="o">=</span> <span class="o">&lt;&lt;</span><span class="no">END_MY_LINE</span>
</span><span class='line'><span class="sh">This is first line</span>
</span><span class='line'><span class="sh">second line and</span>
</span><span class='line'><span class="sh">third line</span>
</span><span class='line'><span class="no">END_MY_LINE</span>
</span></code></pre></td></tr></table></div></figure>


<p>For the last example above, &lt;&lt; start the string literal.</p>

<h3>String Expressions</h3>

<p>Just like the previous section, <code>String</code> could use expressions and act like <code>Number</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="s2">&quot;abc&quot;</span><span class="o">*</span><span class="mi">5</span>
</span><span class='line'><span class="o">//</span> <span class="n">abcabcabcabcabc</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;x&quot;</span> <span class="o">&gt;</span> <span class="s2">&quot;y&quot;</span>
</span><span class='line'><span class="sr">//</span> <span class="kp">false</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;y&quot;</span> <span class="o">&gt;</span> <span class="s2">&quot;x&quot;</span>
</span><span class='line'><span class="sr">//</span> <span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure>


<h4>ASCII</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="sc">?x</span>
</span><span class='line'><span class="nb">puts</span> <span class="mi">120</span><span class="o">.</span><span class="n">chr</span>
</span></code></pre></td></tr></table></div></figure>


<p>First line will convert character to <code>ASCII</code> value, the second line will convert the value to character based on <code>ASCII</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>120
</span><span class='line'>x
</span></code></pre></td></tr></table></div></figure>


<h2>References</h2>

<ul>
<li>class <a href="http://www.ruby-doc.org/core-2.1.1/String.html">String</a> <em>base on ruby 2.1.1</em></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Numbers: Floating Point and Constant]]></title>
    <link href="http://rubyrookie.kumaya.co/blog/2014/03/12/numbers-floating-point-and-constant/"/>
    <updated>2014-03-12T22:55:28+08:00</updated>
    <id>http://rubyrookie.kumaya.co/blog/2014/03/12/numbers-floating-point-and-constant</id>
    <content type="html"><![CDATA[<p><em>start from P. 37</em></p>

<ul>
<li>Floating Point Numbers</li>
<li>Constants</li>
</ul>


<!-- more -->


<h2>Floating Point Numbers</h2>

<p>If you want to devide integer numbers and show as float, you need to add <code>.0</code> to the numbers:</p>

<p><strong>Original</strong> &ndash; integer divide integer will producing integer.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="mi">10</span> <span class="o">/</span> <span class="mi">3</span>
</span></code></pre></td></tr></table></div></figure>


<p>will producing:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>3
</span></code></pre></td></tr></table></div></figure>


<p><strong>Adding</strong> <code>.0</code> to treat as floating point numbers:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="mi">10</span><span class="o">.</span><span class="mi">0</span> <span class="o">/</span> <span class="mi">3</span><span class="o">.</span><span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<p>will producing:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>3.333333333333333
</span></code></pre></td></tr></table></div></figure>


<h3>Convertion of types</h3>

<p>Using <code>to_f</code> and <code>to_i</code> or relevant methods to convert types.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">x</span> <span class="o">=</span> <span class="mi">10</span>
</span><span class='line'><span class="n">y</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">x</span><span class="o">.</span><span class="n">to_f</span> <span class="o">/</span> <span class="n">y</span><span class="o">.</span><span class="n">to_f</span>
</span></code></pre></td></tr></table></div></figure>


<p>will producing:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>3.33333333333333
</span></code></pre></td></tr></table></div></figure>


<p>Convert to integer like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="mi">5</span><span class="o">.</span><span class="mi">7</span><span class="o">.</span><span class="n">to_i</span>
</span></code></pre></td></tr></table></div></figure>


<p>and get:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>5
</span></code></pre></td></tr></table></div></figure>


<h2>Constants</h2>

<p>Make the variable name beginning with a capital letter to let it is a constant.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Pi</span> <span class="o">=</span> <span class="mi">3</span><span class="o">.</span><span class="mi">14159</span>
</span></code></pre></td></tr></table></div></figure>


<h3>The Class Name</h3>

<p>The class name start with capital letter as well, it means once th class is defined, it is a constant part of the program and therefore acts as a constant, too.</p>

<h2>References</h2>

<ul>
<li><a href="http://www.ruby-doc.org/core-2.1.1/Float.html">Float</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Looping]]></title>
    <link href="http://rubyrookie.kumaya.co/blog/2014/03/11/looping/"/>
    <updated>2014-03-11T22:23:56+08:00</updated>
    <id>http://rubyrookie.kumaya.co/blog/2014/03/11/looping</id>
    <content type="html"><![CDATA[<p><em>start from P. 36</em></p>

<ul>
<li><code>times</code> to loop</li>
<li>loop with other iterators</li>
</ul>


<!-- more -->


<h2>Basic: Using <code>times</code> method to looping</h2>

<p>and using <code>do ... end</code> to surround what do you want to do. And it is better way rather than using <code>{ ... }</code>, but curly brackets make the code more easy to read on a single line.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">5</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="nb">puts</span> <span class="s2">&quot;Test&quot;</span> <span class="k">end</span>
</span><span class='line'><span class="mi">5</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;Test&quot;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>will both produce the same results:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>Test
</span><span class='line'>Test
</span><span class='line'>Test
</span><span class='line'>Test
</span><span class='line'>Test
</span></code></pre></td></tr></table></div></figure>


<h2>Iterators</h2>

<p>The basic methods are like followings:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">.</span><span class="n">upto</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span> <span class="p">{</span> <span class="sr">/* Do what ever you want */</span> <span class="p">}</span>     <span class="sr">//</span> <span class="err">從</span> <span class="mi">1</span> <span class="err">一次加</span> <span class="mi">1</span> <span class="err">加到</span> <span class="mi">5</span>
</span><span class='line'><span class="mi">10</span><span class="o">.</span><span class="n">downto</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span> <span class="p">{</span> <span class="sr">/* Do what ever you want */</span> <span class="p">}</span>  <span class="sr">//</span> <span class="err">從</span> <span class="mi">10</span> <span class="err">一次減</span> <span class="mi">1</span> <span class="err">減到</span> <span class="mi">5</span>
</span><span class='line'><span class="mi">0</span><span class="o">.</span><span class="n">step</span><span class="p">(</span><span class="mi">50</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span> <span class="p">{</span> <span class="sr">/* Do what ever you want */</span> <span class="p">}</span> <span class="sr">//</span> <span class="err">從</span> <span class="mi">0</span> <span class="err">加到</span> <span class="mi">50</span> <span class="err">，每次加</span> <span class="mi">5</span>
</span></code></pre></td></tr></table></div></figure>


<h3>可以用 pipe line 來接從迴圈傳進來的值</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">.</span><span class="n">upto</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">number</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">number</span> <span class="p">}</span> <span class="sr">//</span> <span class="n">pipe</span> <span class="n">line</span> <span class="err">之間可以放任意符合規則名稱的變數</span>
</span><span class='line'>
</span><span class='line'><span class="sr">//</span> <span class="ow">or</span>
</span><span class='line'>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="n">upto</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">number</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">number</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>will both produce:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>1
</span><span class='line'>2
</span><span class='line'>3
</span><span class='line'>4
</span><span class='line'>5
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Basic Comparison]]></title>
    <link href="http://rubyrookie.kumaya.co/blog/2014/03/11/basic-comparison/"/>
    <updated>2014-03-11T21:48:54+08:00</updated>
    <id>http://rubyrookie.kumaya.co/blog/2014/03/11/basic-comparison</id>
    <content type="html"><![CDATA[<!-- more -->


<h2>Full List of Comparison</h2>

<table>
<thead>
<tr>
<th> Comparison </th>
<th> Meaning </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>x &gt; y</code> </td>
<td> Greater than, 大於</td>
</tr>
<tr>
<td> <code>x &lt; y</code> </td>
<td> Less than, 小於 </td>
</tr>
<tr>
<td> <code>x == y</code> </td>
<td> Equal to, 等於</td>
</tr>
<tr>
<td> <code>x &gt;= y</code> </td>
<td> Greater than <em>or</em> equal to, 大於或等於</td>
</tr>
<tr>
<td> <code>x &lt;= y</code> </td>
<td> Less than <em>or</em> equal to, 小於或等於</td>
</tr>
<tr>
<td> <code>x &lt;=&gt; y</code> </td>
<td> Comparison; return <code>0</code> if <code>x</code> and <code>y</code> are equal, <code>1</code> if <code>x</code> is higher, and <code>-1</code> if <code>y</code> is higher</td>
</tr>
<tr>
<td> <code>x != y</code> </td>
<td> Not equal to, 不等於</td>
</tr>
</tbody>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Start]]></title>
    <link href="http://rubyrookie.kumaya.co/blog/2014/03/10/start/"/>
    <updated>2014-03-10T22:19:57+08:00</updated>
    <id>http://rubyrookie.kumaya.co/blog/2014/03/10/start</id>
    <content type="html"><![CDATA[<p>這個是我開始學 Ruby 用來架筆記的網站，開始於 2013 年 3 月 10 日。</p>
]]></content>
  </entry>
  
</feed>
