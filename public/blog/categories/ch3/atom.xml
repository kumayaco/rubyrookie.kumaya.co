<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: CH3 | The Ruby Rookie Notes]]></title>
  <link href="http://rubyrookie.kumaya.co/blog/categories/ch3/atom.xml" rel="self"/>
  <link href="http://rubyrookie.kumaya.co/"/>
  <updated>2014-03-19T06:24:22+08:00</updated>
  <id>http://rubyrookie.kumaya.co/</id>
  <author>
    <name><![CDATA[Vincent Chen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[String: Manipulations]]></title>
    <link href="http://rubyrookie.kumaya.co/blog/2014/03/19/string-manipulations/"/>
    <updated>2014-03-19T00:27:09+08:00</updated>
    <id>http://rubyrookie.kumaya.co/blog/2014/03/19/string-manipulations</id>
    <content type="html"><![CDATA[<p><em>started from P. 43</em></p>

<ul>
<li>String Methods</li>
</ul>


<!-- more -->


<p></p>

<h3>String Methods</h3>

<table>
<thead>
<tr>
<th>Expression </th>
<th> Output</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>"Test" + "Test"</code> </td>
<td> <code>TestTest</code></td>
</tr>
<tr>
<td><code>"Test".capitalize</code> </td>
<td> <code>Test</code></td>
</tr>
<tr>
<td><code>"Test".downcase</code> </td>
<td> <code>test</code></td>
</tr>
<tr>
<td><code>"Test".chop</code> </td>
<td> <code>Tes</code></td>
</tr>
<tr>
<td><code>"Test".next</code> </td>
<td> <code>Tesu</code></td>
</tr>
<tr>
<td><code>"Test".reverse</code> </td>
<td> <code>tseT</code></td>
</tr>
<tr>
<td><code>"Test".sum</code> </td>
<td> <code>416</code></td>
</tr>
<tr>
<td><code>"Test".swapcase</code> </td>
<td> <code>tEST</code></td>
</tr>
<tr>
<td><code>"Test".upcase</code> </td>
<td> <code>TEST</code></td>
</tr>
<tr>
<td><code>"Test".upcase.reverse</code> </td>
<td> <code>TSET</code></td>
</tr>
<tr>
<td><code>"Test".upcase.reverse.next</code> </td>
<td> <code>TSEU</code></td>
</tr>
</tbody>
</table>


<hr />

<p>Like the last three items, you can combo the methods to do multiple manipulations on String.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[String: Interpolation]]></title>
    <link href="http://rubyrookie.kumaya.co/blog/2014/03/19/string-interpolation/"/>
    <updated>2014-03-19T00:00:54+08:00</updated>
    <id>http://rubyrookie.kumaya.co/blog/2014/03/19/string-interpolation</id>
    <content type="html"><![CDATA[<p><em>start from P. 43</em></p>

<!-- more -->


<p>Using <code>#{}</code> to wrap the variables or expressions in, will print out what you have inside.</p>

<p><code>ruby
x = 10
y = 20
puts "#{x} + #{y} = #{x+y}"
</code>
will get;
<code>sh
10 + 20 = 30
</code></p>

<p>In the other hand, you can do this as well:
<code>ruby
puts "100 * 5 = #{100*5}"
</code>
will get:
<code>
100 * 5 = 500
</code></p>

<h3>Combo</h3>

<p>Combine with other functionalities mentioned before, we can come up with more complicated statement like this:</p>

<p><code>ruby
my_string "It's a #{"bad " * 5}world"
puts my_string
</code></p>

<p>will get:</p>

<p><code>sh
It's a bad bad bad bad bad world
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Text and Strings]]></title>
    <link href="http://rubyrookie.kumaya.co/blog/2014/03/17/text-and-strings/"/>
    <updated>2014-03-17T22:43:52+08:00</updated>
    <id>http://rubyrookie.kumaya.co/blog/2014/03/17/text-and-strings</id>
    <content type="html"><![CDATA[<p><em>start from P. 39</em></p>

<p>Manipulating text and content.</p>

<ul>
<li>String Literals</li>
</ul>


<!-- more -->


<h2>String Literals</h2>

<p>First, the <code>String</code> class:</p>

<p><code>ruby
puts "Hello, world!".class
</code></p>

<p>will get</p>

<p><code>sh
String
</code></p>

<h3>Basic expressions just like <code>Number</code>s</h3>

<p><code>ruby
x = "Test"
y = "String"
puts "Success!" if x + y == "TestString"
</code></p>

<p>result:</p>

<p><code>sh
Success!
</code></p>

<h3>Multiple Lines</h3>

<p>You can wrap your lines with your prefered delimiters.</p>

<p>```ruby
x = %q{This is first line,
second line and
third line}</p>

<p>// or</p>

<p>x = %q!This is first line,
second line and
third line!</p>

<p>// or</p>

<p>x = &lt;&lt;END_MY_LINE
This is first line
second line and
third line
END_MY_LINE</p>

<p>```</p>

<p>For the last example above, &lt;&lt; start the string literal.</p>

<h3>String Expressions</h3>

<p>Just like the previous section, <code>String</code> could use expressions and act like <code>Number</code>.</p>

<p>```ruby
puts &ldquo;abc&rdquo;*5
// abcabcabcabcabc</p>

<p>puts &ldquo;x&rdquo; > &ldquo;y&rdquo;
// false</p>

<p>puts &ldquo;y&rdquo; > &ldquo;x&rdquo;
// true
```</p>

<h4>ASCII</h4>

<p><code>ruby
puts ?x
puts 120.chr
</code>
First line will convert character to <code>ASCII</code> value, the second line will convert the value to character based on <code>ASCII</code>:
<code>sh
120
x
</code></p>

<h2>References</h2>

<ul>
<li>class <a href="http://www.ruby-doc.org/core-2.1.1/String.html">String</a> <em>base on ruby 2.1.1</em></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Numbers: Floating Point and Constant]]></title>
    <link href="http://rubyrookie.kumaya.co/blog/2014/03/12/numbers-floating-point-and-constant/"/>
    <updated>2014-03-12T22:55:28+08:00</updated>
    <id>http://rubyrookie.kumaya.co/blog/2014/03/12/numbers-floating-point-and-constant</id>
    <content type="html"><![CDATA[<p><em>start from P. 37</em></p>

<ul>
<li>Floating Point Numbers</li>
<li>Constants</li>
</ul>


<!-- more -->


<h2>Floating Point Numbers</h2>

<p>If you want to devide integer numbers and show as float, you need to add <code>.0</code> to the numbers:</p>

<p><strong>Original</strong> &ndash; integer divide integer will producing integer.</p>

<p><code>ruby
puts 10 / 3
</code></p>

<p>will producing:</p>

<p><code>sh
3
</code></p>

<p><strong>Adding</strong> <code>.0</code> to treat as floating point numbers:</p>

<p><code>ruby
puts 10.0 / 3.0
</code></p>

<p>will producing:</p>

<p><code>sh
3.333333333333333
</code></p>

<h3>Convertion of types</h3>

<p>Using <code>to_f</code> and <code>to_i</code> or relevant methods to convert types.</p>

<p><code>ruby
x = 10
y = 3
puts x.to_f / y.to_f
</code></p>

<p>will producing:</p>

<p><code>sh
3.33333333333333
</code></p>

<p>Convert to integer like this:</p>

<p><code>ruby
puts 5.7.to_i
</code>
and get:
<code>sh
5
</code></p>

<h2>Constants</h2>

<p>Make the variable name beginning with a capital letter to let it is a constant.</p>

<p><code>ruby
Pi = 3.14159
</code></p>

<h3>The Class Name</h3>

<p>The class name start with capital letter as well, it means once th class is defined, it is a constant part of the program and therefore acts as a constant, too.</p>

<h2>References</h2>

<ul>
<li><a href="http://www.ruby-doc.org/core-2.1.1/Float.html">Float</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Looping]]></title>
    <link href="http://rubyrookie.kumaya.co/blog/2014/03/11/looping/"/>
    <updated>2014-03-11T22:23:56+08:00</updated>
    <id>http://rubyrookie.kumaya.co/blog/2014/03/11/looping</id>
    <content type="html"><![CDATA[<p><em>start from P. 36</em></p>

<ul>
<li><code>times</code> to loop</li>
<li>loop with other iterators</li>
</ul>


<!-- more -->


<h2>Basic: Using <code>times</code> method to looping</h2>

<p>and using <code>do ... end</code> to surround what do you want to do. And it is better way rather than using <code>{ ... }</code>, but curly brackets make the code more easy to read on a single line.</p>

<p><code>ruby
5.times do puts "Test" end
5.times { puts "Test" }
</code></p>

<p>will both produce the same results:</p>

<p><code>sh
Test
Test
Test
Test
Test
</code></p>

<h2>Iterators</h2>

<p>The basic methods are like followings:</p>

<p><code>ruby
1.upto(5) { /* Do what ever you want */ }     // 從 1 一次加 1 加到 5
10.downto(5) { /* Do what ever you want */ }  // 從 10 一次減 1 減到 5
0.step(50, 5) { /* Do what ever you want */ } // 從 0 加到 50 ，每次加 5
</code></p>

<h3>可以用 pipe line 來接從迴圈傳進來的值</h3>

<p>```ruby
1.upto(5) { |number| puts number } // pipe line 之間可以放任意符合規則名稱的變數</p>

<p>// or</p>

<p>1.upto(5) do |number|</p>

<pre><code>puts number
</code></pre>

<p>end
```</p>

<p>will both produce:</p>

<p><code>sh
1
2
3
4
5
</code></p>
]]></content>
  </entry>
  
</feed>
