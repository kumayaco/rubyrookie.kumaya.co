<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: String | The Ruby Rookie Notes]]></title>
  <link href="http://rubyrookie.kumaya.co/blog/categories/string/atom.xml" rel="self"/>
  <link href="http://rubyrookie.kumaya.co/"/>
  <updated>2014-04-09T23:57:40+08:00</updated>
  <id>http://rubyrookie.kumaya.co/</id>
  <author>
    <name><![CDATA[Vincent Chen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[String: Basic Regular Expressions]]></title>
    <link href="http://rubyrookie.kumaya.co/blog/2014/03/19/string-basic-regular-expressions/"/>
    <updated>2014-03-19T22:31:54+08:00</updated>
    <id>http://rubyrookie.kumaya.co/blog/2014/03/19/string-basic-regular-expressions</id>
    <content type="html"><![CDATA[<p><em>started from P. 44</em></p>

<p>This article is the brief introduction to regex.</p>

<ul>
<li>Substitutions &ndash; <code>.sub()</code></li>
<li>Iterations &ndash; <code>.scan()</code></li>
<li>Matching</li>
</ul>


<!-- more -->


<h3>Substitutions</h3>

<h4>Basics</h4>

<p>First, we can try without regex:</p>

<p><code>ruby
puts "foobar".sub('bar','foo')
</code></p>

<p>will get</p>

<p><code>sh
foofoo
</code></p>

<p>Using <code>gsub()</code></p>

<p><code>ruby
puts "this is a test".gsub('i', '')
</code></p>

<p>will get</p>

<p><code>sh
ths s a test
</code></p>

<h4>Substitute with simple <code>regex</code></h4>

<p><code>ruby
x= "This is a test"
puts x.sub(/^../,'Hello')
</code></p>

<p><code>^</code> is an <em>anchor</em> to let it know will match from the beginning of any lines within the string. the two periods, <code>..</code>, mean two characters. So the <code>/^../</code> means &ldquo;any two characters immediately after the start of a line,&rdquo; and it will substitute <code>Th</code> in this case.</p>

<p><code>sh
Hellois is a test
</code>
and <code>$</code> is an <em>anchor</em> to let it know match frone the end of any lines within the given string.</p>

<p><code>ruby
x= "This is a test"
puts x.sub(/..$/,'Hello')
</code></p>

<p>will get</p>

<p><code>sh
This is a teHello
</code></p>

<h3>Iteration</h3>

<p>basic <code>scan()</code></p>

<p>```ruby
&ldquo;xyz&rdquo;.scan(/./) do |letter| puts letter end</p>

<p>// or</p>

<p>&ldquo;xyz&rdquo;.scan(/./) { |letter| puts letter }
```</p>

<p><code>/./</code> will scan every letter out, these will both get</p>

<p><code>sh
x
y
z
</code></p>

<h4>Symbols</h4>

<p>if use only <code>..</code> for extract every other letter, will get <em>space</em>s as well. to prevent this situation, we can use <code>\w</code> to skip spaces.</p>

<p><code>ruby
"This is a test".scan(/\w\w/) { |x| puts x }
</code></p>

<p>will get</p>

<p><code>sh
Th
is
is
te
st
</code></p>

<h3>Basic Special Characters and Symbols Within Regular Expressions</h3>

<table>
<thead>
<tr>
<th>Character </th>
<th> Meaning</th>
</tr>
</thead>
<tbody>
<tr>
<td>^  </td>
<td> Anchor, the begining of a line</td>
</tr>
<tr>
<td>$  </td>
<td> Anchor, the end of a line</td>
</tr>
<tr>
<td>\A </td>
<td> Anchor, the start of a string</td>
</tr>
<tr>
<td>\Z </td>
<td> Anchor, the end of a string</td>
</tr>
<tr>
<td>.  </td>
<td> Any character </td>
</tr>
<tr>
<td>\w </td>
<td> Any letter, digit, or underscore</td>
</tr>
<tr>
<td>\W </td>
<td> Anything that <code>\w</code> doesn&rsquo;t match</td>
</tr>
<tr>
<td>\d </td>
<td> Any digit</td>
</tr>
<tr>
<td>\D </td>
<td> Non-digit</td>
</tr>
<tr>
<td>\s </td>
<td> White space, tab, newline</td>
</tr>
<tr>
<td>\S </td>
<td> non-whitespace</td>
</tr>
</tbody>
</table>


<br/><br/>


<h3>Matching</h3>

<p><code>=~</code> &ndash; the matching operator</p>

<p><code>ruby
puts "String has vowels" if "This is a test" =~ /[aeiou]/
</code>
<code>match</code> returns a <code>MatchData</code> object that can be accessed like an array.</p>

<p><code>ruby
x = "This is a test".match(/(\w+) (\w+)/)
puts x[0]
puts x[1]
puts x[2]
</code></p>

<p>will get</p>

<p><code>
This is
This
is
</code></p>

<h3>References</h3>

<ul>
<li><a href="http://www.ruby-doc.org/core-2.1.0/String.html#method-i-sub">sub()</a></li>
<li><a href="http://www.ruby-doc.org/core-2.1.0/String.html#method-i-gsub">gsub()</a></li>
<li><a href="http://www.ruby-doc.org/core-2.1.0/String.html#method-i-scan">scan()</a></li>
<li><a href="http://www.ruby-doc.org/core-2.1.0/String.html#method-i-match">match()</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[String: Manipulations]]></title>
    <link href="http://rubyrookie.kumaya.co/blog/2014/03/19/string-manipulations/"/>
    <updated>2014-03-19T00:27:09+08:00</updated>
    <id>http://rubyrookie.kumaya.co/blog/2014/03/19/string-manipulations</id>
    <content type="html"><![CDATA[<p><em>started from P. 43</em></p>

<ul>
<li>String Methods</li>
</ul>


<!-- more -->


<p></p>

<h3>String Methods</h3>

<table>
<thead>
<tr>
<th>Expression </th>
<th> Output</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>"Test" + "Test"</code> </td>
<td> <code>TestTest</code></td>
</tr>
<tr>
<td><code>"Test".capitalize</code> </td>
<td> <code>Test</code></td>
</tr>
<tr>
<td><code>"Test".downcase</code> </td>
<td> <code>test</code></td>
</tr>
<tr>
<td><code>"Test".chop</code> </td>
<td> <code>Tes</code></td>
</tr>
<tr>
<td><code>"Test".next</code> </td>
<td> <code>Tesu</code></td>
</tr>
<tr>
<td><code>"Test".reverse</code> </td>
<td> <code>tseT</code></td>
</tr>
<tr>
<td><code>"Test".sum</code> </td>
<td> <code>416</code></td>
</tr>
<tr>
<td><code>"Test".swapcase</code> </td>
<td> <code>tEST</code></td>
</tr>
<tr>
<td><code>"Test".upcase</code> </td>
<td> <code>TEST</code></td>
</tr>
<tr>
<td><code>"Test".upcase.reverse</code> </td>
<td> <code>TSET</code></td>
</tr>
<tr>
<td><code>"Test".upcase.reverse.next</code> </td>
<td> <code>TSEU</code></td>
</tr>
</tbody>
</table>


<hr />

<p>Like the last three items, you can combo the methods to do multiple manipulations on String.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[String: Interpolation]]></title>
    <link href="http://rubyrookie.kumaya.co/blog/2014/03/19/string-interpolation/"/>
    <updated>2014-03-19T00:00:54+08:00</updated>
    <id>http://rubyrookie.kumaya.co/blog/2014/03/19/string-interpolation</id>
    <content type="html"><![CDATA[<p><em>start from P. 43</em></p>

<!-- more -->


<p>Using <code>#{}</code> to wrap the variables or expressions in, will print out what you have inside.</p>

<p><code>ruby
x = 10
y = 20
puts "#{x} + #{y} = #{x+y}"
</code>
will get;
<code>sh
10 + 20 = 30
</code></p>

<p>In the other hand, you can do this as well:
<code>ruby
puts "100 * 5 = #{100*5}"
</code>
will get:
<code>
100 * 5 = 500
</code></p>

<h3>Combo</h3>

<p>Combine with other functionalities mentioned before, we can come up with more complicated statement like this:</p>

<p><code>ruby
my_string "It's a #{"bad " * 5}world"
puts my_string
</code></p>

<p>will get:</p>

<p><code>sh
It's a bad bad bad bad bad world
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Text and Strings]]></title>
    <link href="http://rubyrookie.kumaya.co/blog/2014/03/17/text-and-strings/"/>
    <updated>2014-03-17T22:43:52+08:00</updated>
    <id>http://rubyrookie.kumaya.co/blog/2014/03/17/text-and-strings</id>
    <content type="html"><![CDATA[<p><em>start from P. 39</em></p>

<p>Manipulating text and content.</p>

<ul>
<li>String Literals</li>
</ul>


<!-- more -->


<h2>String Literals</h2>

<p>First, the <code>String</code> class:</p>

<p><code>ruby
puts "Hello, world!".class
</code></p>

<p>will get</p>

<p><code>sh
String
</code></p>

<h3>Basic expressions just like <code>Number</code>s</h3>

<p><code>ruby
x = "Test"
y = "String"
puts "Success!" if x + y == "TestString"
</code></p>

<p>result:</p>

<p><code>sh
Success!
</code></p>

<h3>Multiple Lines</h3>

<p>You can wrap your lines with your prefered delimiters.</p>

<p>```ruby
x = %q{This is first line,
second line and
third line}</p>

<p>// or</p>

<p>x = %q!This is first line,
second line and
third line!</p>

<p>// or</p>

<p>x = &lt;&lt;END_MY_LINE
This is first line
second line and
third line
END_MY_LINE</p>

<p>```</p>

<p>For the last example above, &lt;&lt; start the string literal.</p>

<h3>String Expressions</h3>

<p>Just like the previous section, <code>String</code> could use expressions and act like <code>Number</code>.</p>

<p>```ruby
puts &ldquo;abc&rdquo;*5
// abcabcabcabcabc</p>

<p>puts &ldquo;x&rdquo; > &ldquo;y&rdquo;
// false</p>

<p>puts &ldquo;y&rdquo; > &ldquo;x&rdquo;
// true
```</p>

<h4>ASCII</h4>

<p><code>ruby
puts ?x
puts 120.chr
</code>
First line will convert character to <code>ASCII</code> value, the second line will convert the value to character based on <code>ASCII</code>:
<code>sh
120
x
</code></p>

<h2>References</h2>

<ul>
<li>class <a href="http://www.ruby-doc.org/core-2.1.1/String.html">String</a> <em>base on ruby 2.1.1</em></li>
</ul>

]]></content>
  </entry>
  
</feed>
