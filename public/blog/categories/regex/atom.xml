<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Regex | The Ruby Rookie Notes]]></title>
  <link href="http://rubyrookie.kumaya.co/blog/categories/regex/atom.xml" rel="self"/>
  <link href="http://rubyrookie.kumaya.co/"/>
  <updated>2014-04-09T23:57:40+08:00</updated>
  <id>http://rubyrookie.kumaya.co/</id>
  <author>
    <name><![CDATA[Vincent Chen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Arrays and Lists]]></title>
    <link href="http://rubyrookie.kumaya.co/blog/2014/03/22/arrays-and-lists/"/>
    <updated>2014-03-22T08:43:13+08:00</updated>
    <id>http://rubyrookie.kumaya.co/blog/2014/03/22/arrays-and-lists</id>
    <content type="html"><![CDATA[<p><em>started from P. 50</em></p>

<!-- more -->


<h3>Basic Arrays</h3>

<h4>Array Literal</h4>

<p><code>ruby
x = [1, 2, 3, 4]
//   ^  ^  ^  ^  elements
</code></p>

<p>and use <em>element reference</em>, just like most of programming languages do, to access content in an array:</p>

<p><code>ruby
puts x[2]
</code></p>

<p>will get</p>

<p><code>sh
3
</code></p>

<h4>Operations</h4>

<p>based on the array created in the first section of this article.</p>

<p>```ruby
x[2] += 1
puts x[2]</p>

<p>x[2] = &ldquo;Fish&rdquo; * 3
puts x[2]
```</p>

<p>will get</p>

<p><code>sh
4
FishFishFish
</code></p>

<h4>Push Data into an Array</h4>

<p>use <code>&lt;&lt;</code> operator or <code>push()</code> method</p>

<p>```ruby
x = [] // create an empty array at first</p>

<p>x &lt;&lt; &ldquo;Word&rdquo;</p>

<p>// or</p>

<p>x.push(&ldquo;Word&rdquo;)</p>

<p>// then</p>

<p>x.pop() // Use LIFO, pop the last-postion-element in an array
x.length()</p>

<p>```</p>

<p>will both get</p>

<p><code>sh
Word
1
</code></p>

<h4>Join the Elements in Array</h4>

<p><code>ruby
x = ["Join", "The", "Elements"]
puts x.join
</code></p>

<p>will get</p>

<p><code>sh
JoinTheElements
</code></p>

<p><strong>And</strong> to be more clear, you can add your owned seperator</p>

<p><code>ruby
puts x.join(', ')
</code></p>

<p>will get</p>

<p><code>sh
Join, The, Elements
</code></p>

<h3>Process String into Array</h3>

<p>As the <a href="/blog/2014/03/19/string-basic-regular-expressions/">previous article</a> about basic regex, you can put the results as elements into array.</p>

<p><code>ruby
puts "This is a Test".scan(/\w/).join(", ")
</code>
will get</p>

<p><code>sh
T, h, i, s, i, s, a, T, e, s, t
</code></p>

<p>Using <code>splite()</code> to seperate the string into array by given regular expression.</p>

<p><code>ruby
puts "This is a Test".split(/\s/).join(", ")
</code></p>

<p>The regular expression <code>/\s/</code> is to let method splitting based on space. And this will get:</p>

<p><code>sh
This, is, a, Test
</code></p>

<h3>Array Iteration</h3>

<p>There are two simple ways to iterate arrays: <code>each</code> and <code>collect</code>. Using pipelines, <code>||</code>, to catch the values.</p>

<h4><code>each</code></h4>

<p><code>ruby
["a","b","c"].each do |element| puts element end
</code></p>

<p>will get</p>

<p><code>sh
a
b
c
</code></p>

<h4><code>collect</code></h4>

<p><code>ruby
[1,2,3].collect do |element| element*2 end
</code></p>

<p>will get returned array with modified elements</p>

<p><code>sh
[2,4,6]
</code></p>

<p><code>map</code> is the alias of <code>collect</code>, for more, please read this <a href="http://stackoverflow.com/a/5254764">answer</a>.</p>

<h4>Old Fasion is also Great</h4>

<p>```ruby
a = [1,2,3,4]
i = 0</p>

<p>while (i &lt; a.length)</p>

<pre><code>puts a[i]
i += 1
</code></pre>

<p>end
```</p>

<p>will also get the same result as using <code>each</code></p>

<p><code>sh
1
2
3
4
</code></p>

<h3>Others about Array</h3>

<h4>Addition and Substraction</h4>

<p>Giving two arrays,</p>

<p><code>ruby
a = [1,2,3]
b = [1,3]
</code></p>

<p>Using addition</p>

<p><code>ruby
a + b
</code></p>

<p>will get the combined array</p>

<p><code>sh
[1,2,3,1,3]
</code></p>

<p>Using substraction</p>

<p><code>ruby
a - b
</code></p>

<p>will get the array</p>

<p><code>sh
[2]
</code></p>

<h4>Check is Empty</h4>

<p>Using <code>empty?</code></p>

<p><code>ruby
a = [1,2]
a.empty?
</code></p>

<p>will get</p>

<p><code>
false
</code></p>

<h4>Check an Array has a Certain Element</h4>

<p>Using <code>include?</code></p>

<p><code>ruby
a = [1,2,3]
puts x.include?("x")
puts x.include?(3)
</code></p>

<p>will get</p>

<p><code>sh
false
true
</code></p>

<h4>Accessiong the First and Last Elements</h4>

<p><code>ruby
a = [1,2,3]
puts x.first
puts x.last
</code></p>

<p>will get</p>

<p><code>sh
1
3
</code></p>

<h5>More</h5>

<p><code>ruby
a = [1,2,3]
puts a.first(2).join(", ")
</code></p>

<p>will get</p>

<p><code>sh
1, 2
</code></p>

<h4>Reverse</h4>

<p><code>ruby
a = [1,2,3]
puts a.reverse
</code></p>

<p>will get</p>

<p><code>sh
[3,2,1]
</code></p>

<h3>References</h3>

<ul>
<li><a href="http://www.ruby-doc.org/core-2.1.1/Array.html"><code>Array</code></a></li>
<li><a href="http://www.ruby-doc.org/core-2.1.1/Array.html#method-i-push"><code>push()</code></a></li>
<li><a href="http://www.ruby-doc.org/core-2.1.1/Array.html#method-i-join"><code>join()</code></a></li>
<li><a href="http://www.ruby-doc.org/core-2.1.1/Array.html#method-i-split"><code>split()</code></a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[String: Basic Regular Expressions]]></title>
    <link href="http://rubyrookie.kumaya.co/blog/2014/03/19/string-basic-regular-expressions/"/>
    <updated>2014-03-19T22:31:54+08:00</updated>
    <id>http://rubyrookie.kumaya.co/blog/2014/03/19/string-basic-regular-expressions</id>
    <content type="html"><![CDATA[<p><em>started from P. 44</em></p>

<p>This article is the brief introduction to regex.</p>

<ul>
<li>Substitutions &ndash; <code>.sub()</code></li>
<li>Iterations &ndash; <code>.scan()</code></li>
<li>Matching</li>
</ul>


<!-- more -->


<h3>Substitutions</h3>

<h4>Basics</h4>

<p>First, we can try without regex:</p>

<p><code>ruby
puts "foobar".sub('bar','foo')
</code></p>

<p>will get</p>

<p><code>sh
foofoo
</code></p>

<p>Using <code>gsub()</code></p>

<p><code>ruby
puts "this is a test".gsub('i', '')
</code></p>

<p>will get</p>

<p><code>sh
ths s a test
</code></p>

<h4>Substitute with simple <code>regex</code></h4>

<p><code>ruby
x= "This is a test"
puts x.sub(/^../,'Hello')
</code></p>

<p><code>^</code> is an <em>anchor</em> to let it know will match from the beginning of any lines within the string. the two periods, <code>..</code>, mean two characters. So the <code>/^../</code> means &ldquo;any two characters immediately after the start of a line,&rdquo; and it will substitute <code>Th</code> in this case.</p>

<p><code>sh
Hellois is a test
</code>
and <code>$</code> is an <em>anchor</em> to let it know match frone the end of any lines within the given string.</p>

<p><code>ruby
x= "This is a test"
puts x.sub(/..$/,'Hello')
</code></p>

<p>will get</p>

<p><code>sh
This is a teHello
</code></p>

<h3>Iteration</h3>

<p>basic <code>scan()</code></p>

<p>```ruby
&ldquo;xyz&rdquo;.scan(/./) do |letter| puts letter end</p>

<p>// or</p>

<p>&ldquo;xyz&rdquo;.scan(/./) { |letter| puts letter }
```</p>

<p><code>/./</code> will scan every letter out, these will both get</p>

<p><code>sh
x
y
z
</code></p>

<h4>Symbols</h4>

<p>if use only <code>..</code> for extract every other letter, will get <em>space</em>s as well. to prevent this situation, we can use <code>\w</code> to skip spaces.</p>

<p><code>ruby
"This is a test".scan(/\w\w/) { |x| puts x }
</code></p>

<p>will get</p>

<p><code>sh
Th
is
is
te
st
</code></p>

<h3>Basic Special Characters and Symbols Within Regular Expressions</h3>

<table>
<thead>
<tr>
<th>Character </th>
<th> Meaning</th>
</tr>
</thead>
<tbody>
<tr>
<td>^  </td>
<td> Anchor, the begining of a line</td>
</tr>
<tr>
<td>$  </td>
<td> Anchor, the end of a line</td>
</tr>
<tr>
<td>\A </td>
<td> Anchor, the start of a string</td>
</tr>
<tr>
<td>\Z </td>
<td> Anchor, the end of a string</td>
</tr>
<tr>
<td>.  </td>
<td> Any character </td>
</tr>
<tr>
<td>\w </td>
<td> Any letter, digit, or underscore</td>
</tr>
<tr>
<td>\W </td>
<td> Anything that <code>\w</code> doesn&rsquo;t match</td>
</tr>
<tr>
<td>\d </td>
<td> Any digit</td>
</tr>
<tr>
<td>\D </td>
<td> Non-digit</td>
</tr>
<tr>
<td>\s </td>
<td> White space, tab, newline</td>
</tr>
<tr>
<td>\S </td>
<td> non-whitespace</td>
</tr>
</tbody>
</table>


<br/><br/>


<h3>Matching</h3>

<p><code>=~</code> &ndash; the matching operator</p>

<p><code>ruby
puts "String has vowels" if "This is a test" =~ /[aeiou]/
</code>
<code>match</code> returns a <code>MatchData</code> object that can be accessed like an array.</p>

<p><code>ruby
x = "This is a test".match(/(\w+) (\w+)/)
puts x[0]
puts x[1]
puts x[2]
</code></p>

<p>will get</p>

<p><code>
This is
This
is
</code></p>

<h3>References</h3>

<ul>
<li><a href="http://www.ruby-doc.org/core-2.1.0/String.html#method-i-sub">sub()</a></li>
<li><a href="http://www.ruby-doc.org/core-2.1.0/String.html#method-i-gsub">gsub()</a></li>
<li><a href="http://www.ruby-doc.org/core-2.1.0/String.html#method-i-scan">scan()</a></li>
<li><a href="http://www.ruby-doc.org/core-2.1.0/String.html#method-i-match">match()</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
