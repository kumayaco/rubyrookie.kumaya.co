<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Array | The Ruby Rookie Notes]]></title>
  <link href="http://rubyrookie.kumaya.co/blog/categories/array/atom.xml" rel="self"/>
  <link href="http://rubyrookie.kumaya.co/"/>
  <updated>2014-03-29T23:18:55+08:00</updated>
  <id>http://rubyrookie.kumaya.co/</id>
  <author>
    <name><![CDATA[Vincent Chen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Arrays and Lists]]></title>
    <link href="http://rubyrookie.kumaya.co/blog/2014/03/22/arrays-and-lists/"/>
    <updated>2014-03-22T08:43:13+08:00</updated>
    <id>http://rubyrookie.kumaya.co/blog/2014/03/22/arrays-and-lists</id>
    <content type="html"><![CDATA[<p><em>started from P. 50</em></p>

<!-- more -->


<h3>Basic Arrays</h3>

<h4>Array Literal</h4>

<p><code>ruby
x = [1, 2, 3, 4]
//   ^  ^  ^  ^  elements
</code></p>

<p>and use <em>element reference</em>, just like most of programming languages do, to access content in an array:</p>

<p><code>ruby
puts x[2]
</code></p>

<p>will get</p>

<p><code>sh
3
</code></p>

<h4>Operations</h4>

<p>based on the array created in the first section of this article.</p>

<p>```ruby
x[2] += 1
puts x[2]</p>

<p>x[2] = &ldquo;Fish&rdquo; * 3
puts x[2]
```</p>

<p>will get</p>

<p><code>sh
4
FishFishFish
</code></p>

<h4>Push Data into an Array</h4>

<p>use <code>&lt;&lt;</code> operator or <code>push()</code> method</p>

<p>```ruby
x = [] // create an empty array at first</p>

<p>x &lt;&lt; &ldquo;Word&rdquo;</p>

<p>// or</p>

<p>x.push(&ldquo;Word&rdquo;)</p>

<p>// then</p>

<p>x.pop() // Use LIFO, pop the last-postion-element in an array
x.length()</p>

<p>```</p>

<p>will both get</p>

<p><code>sh
Word
1
</code></p>

<h4>Join the Elements in Array</h4>

<p><code>ruby
x = ["Join", "The", "Elements"]
puts x.join
</code></p>

<p>will get</p>

<p><code>sh
JoinTheElements
</code></p>

<p><strong>And</strong> to be more clear, you can add your owned seperator</p>

<p><code>ruby
puts x.join(', ')
</code></p>

<p>will get</p>

<p><code>sh
Join, The, Elements
</code></p>

<h3>Process String into Array</h3>

<p>As the <a href="/blog/2014/03/19/string-basic-regular-expressions/">previous article</a> about basic regex, you can put the results as elements into array.</p>

<p><code>ruby
puts "This is a Test".scan(/\w/).join(", ")
</code>
will get</p>

<p><code>sh
T, h, i, s, i, s, a, T, e, s, t
</code></p>

<p>Using <code>splite()</code> to seperate the string into array by given regular expression.</p>

<p><code>ruby
puts "This is a Test".split(/\s/).join(", ")
</code></p>

<p>The regular expression <code>/\s/</code> is to let method splitting based on space. And this will get:</p>

<p><code>sh
This, is, a, Test
</code></p>

<h3>Array Iteration</h3>

<p>There are two simple ways to iterate arrays: <code>each</code> and <code>collect</code>. Using pipelines, <code>||</code>, to catch the values.</p>

<h4><code>each</code></h4>

<p><code>ruby
["a","b","c"].each do |element| puts element end
</code></p>

<p>will get</p>

<p><code>sh
a
b
c
</code></p>

<h4><code>collect</code></h4>

<p><code>ruby
[1,2,3].collect do |element| element*2 end
</code></p>

<p>will get returned array with modified elements</p>

<p><code>sh
[2,4,6]
</code></p>

<p><code>map</code> is the alias of <code>collect</code>, for more, please read this <a href="http://stackoverflow.com/a/5254764">answer</a>.</p>

<h4>Old Fasion is also Great</h4>

<p>```ruby
a = [1,2,3,4]
i = 0</p>

<p>while (i &lt; a.length)</p>

<pre><code>puts a[i]
i += 1
</code></pre>

<p>end
```</p>

<p>will also get the same result as using <code>each</code></p>

<p><code>sh
1
2
3
4
</code></p>

<h3>Others about Array</h3>

<h4>Addition and Substraction</h4>

<p>Giving two arrays,</p>

<p><code>ruby
a = [1,2,3]
b = [1,3]
</code></p>

<p>Using addition</p>

<p><code>ruby
a + b
</code></p>

<p>will get the combined array</p>

<p><code>sh
[1,2,3,1,3]
</code></p>

<p>Using substraction</p>

<p><code>ruby
a - b
</code></p>

<p>will get the array</p>

<p><code>sh
[2]
</code></p>

<h4>Check is Empty</h4>

<p>Using <code>empty?</code></p>

<p><code>ruby
a = [1,2]
a.empty?
</code></p>

<p>will get</p>

<p><code>
false
</code></p>

<h4>Check an Array has a Certain Element</h4>

<p>Using <code>include?</code></p>

<p><code>ruby
a = [1,2,3]
puts x.include?("x")
puts x.include?(3)
</code></p>

<p>will get</p>

<p><code>sh
false
true
</code></p>

<h4>Accessiong the First and Last Elements</h4>

<p><code>ruby
a = [1,2,3]
puts x.first
puts x.last
</code></p>

<p>will get</p>

<p><code>sh
1
3
</code></p>

<h5>More</h5>

<p><code>ruby
a = [1,2,3]
puts a.first(2).join(", ")
</code></p>

<p>will get</p>

<p><code>sh
1, 2
</code></p>

<h4>Reverse</h4>

<p><code>ruby
a = [1,2,3]
puts a.reverse
</code></p>

<p>will get</p>

<p><code>sh
[3,2,1]
</code></p>

<h3>References</h3>

<ul>
<li><a href="http://www.ruby-doc.org/core-2.1.1/Array.html"><code>Array</code></a></li>
<li><a href="http://www.ruby-doc.org/core-2.1.1/Array.html#method-i-push"><code>push()</code></a></li>
<li><a href="http://www.ruby-doc.org/core-2.1.1/Array.html#method-i-join"><code>join()</code></a></li>
<li><a href="http://www.ruby-doc.org/core-2.1.1/Array.html#method-i-split"><code>split()</code></a></li>
</ul>

]]></content>
  </entry>
  
</feed>
